extends vue

snippet elinput "el-input"
<el-input
  v-model={ inputValue }
  placeholder="请输入内容"
  clearable
  disabled
  onChange={ onChange }
/>
endsnippet

snippet elinputicon "el-input with icons"
<el-input
  v-model={ inputValue }
  placeholder="请输入内容"
  prefix-icon="el-icon-search"
  suffix-icon="el-icon-date"
  onChange={ onChange }
/>
endsnippet

snippet elinputappend "el-input with prepend and append"
<el-input
  v-model={ inputValue }
  placeholder="请输入内容"
  onChange={ onChange }
  >
  <el-select
    slot="prepend"
    v-model={ selectedValue }
    placeholder="请选择"
    >
    <el-option label="餐厅名" value="1" />
    <el-option label="订单号" value="2" />
    <el-option label="用户电话" value="3" />
  </el-select>
  <el-button
    slot="append"
    icon="el-icon-search"
    />
</el-input>
endsnippet

snippet elauto "el-autocomplete"
<el-autocomplete
  placeholder="请输入内容"
  v-model={ inputValue }
  debounce={ 300 }
  trigger-on-focus={ true }
  fetch-suggestions={ fetchSuggestions }
  onSelect={ handleSelect }
/>
<!-- fetchSuggestions(queryString, callback) -->
endsnippet

snippet elautoc "el-autocomplete with slot"
<el-autocomplete
  placeholder="请输入内容"
  v-model={ inputValue }
  debounce={ 300 }
  trigger-on-focus={ true }
  fetch-suggestions={ fetchSuggestions }
  onSelect={ handleSelect }
  popper-class="custom-autocomplete"
  >
  <!-- fetchSuggestions(queryString, callback) -->
  <i
    class="el-icon-edit el-input__icon"
    slot="suffix"
    onClick={ handleIconClick }>
  </i>
  <template slot-scope="{ item }">
    <div class="name">{{ item.value }}</div>
    <span class="address">{{ item.address }}</span>
  </template>
</el-autocomplete>
endsnippet

snippet elinputtextarea "el-input as textarea"
<el-input
  v-model={ inputValue }
  type="textarea"
  placeholder="请输入内容"
  rows={ 2 }
  autosize={ { minRows: 2, maxRows: 4} }
  clearable
  disabled
  onChange={ onChange }
  />
endsnippet
